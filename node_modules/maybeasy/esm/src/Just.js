import Maybe from './Maybe.js';
export class Just extends Maybe {
    constructor(value) {
        super();
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
        });
    }
    getOrElse(_fn) {
        return this.value;
    }
    getOrElseValue(_defaultValue) {
        return this.value;
    }
    map(fn) {
        return new Just(fn(this.value));
    }
    andThen(fn) {
        return fn(this.value);
    }
    orElse(_fn) {
        return this;
    }
    cata(matcher) {
        return matcher.Just(this.value);
    }
    assign(k, other) {
        const maybe = typeof other === 'function' ? other(this.value) : other;
        return maybe.map(b => ({
            ...Object(this.value),
            [k.toString()]: b
        }));
    }
    do(fn) {
        fn(this.value);
        return new Just(this.value);
    }
    elseDo(_fn) {
        return this;
    }
    isJust() {
        return true;
    }
    isNothing() {
        return false;
    }
}
export const just = (value) => new Just(value);
export default Just;

import { just } from './Just.js';
import { nothing } from './Nothing.js';
/**
 * Converts a value that _may_ be null or undefined to a maybe.
 * If the value is null or undefined, then Nothing is returned.
 * If the value is anything else, it is returned wrapped in a Just.
 */
export function fromNullable(v) {
    if (typeof v === 'undefined' || v === null) {
        return nothing();
    }
    return just(v);
}
;
/**
 * Converts a value that _may_ be empty, such as a string or an array, to a
 * maybe. It will accept anything that responds to length.
 * If the value is has a length of 0, then Nothing is returned.
 * If the value is anything else, it is returned wrapped in a Just.
 */
export function fromEmpty(xs) {
    return xs.length === 0 ? nothing() : just(xs);
}
/**
 * Returns true if maybe is an instance of Just
 *
 * Example: Remove `Nothing` values from an array
 *
 *     const maybes: Maybe<string>[]
 *     maybes.filter(isJust)
 */
export function isJust(maybe) { return maybe.isJust(); }
/**
 * Returns true if maybe is an instance of Nothing
 *
 * Example: Count the `Nothing`s
 *
 *     const maybes: Maybe<string>[];
 *     maybes.filter(isNothing).length;
 */
export function isNothing(maybe) { return maybe.isNothing(); }
export function map(fn, maybe) {
    const doit = (maybe) => maybe.map(fn);
    return typeof maybe === 'undefined' ? doit : doit(maybe);
}
export function andThen(fn, maybe) {
    const doit = (maybe) => maybe.andThen(fn);
    return typeof maybe === 'undefined' ? doit : doit(maybe);
}
export function getOrElseValue(value, maybe) {
    const doit = (maybe) => maybe.getOrElseValue(value);
    return typeof maybe === 'undefined' ? doit : doit(maybe);
}
export function getOrElse(fn, maybe) {
    const doit = (maybe) => maybe.getOrElse(fn);
    return typeof maybe === 'undefined' ? doit : doit(maybe);
}
export * from './Just.js';
export * from './Maybe.js';
export * from './Nothing.js';

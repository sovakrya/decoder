"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrElse = exports.getOrElseValue = exports.andThen = exports.map = exports.isNothing = exports.isJust = exports.fromEmpty = exports.fromNullable = void 0;
const Just_js_1 = require("./Just.js");
const Nothing_js_1 = require("./Nothing.js");
/**
 * Converts a value that _may_ be null or undefined to a maybe.
 * If the value is null or undefined, then Nothing is returned.
 * If the value is anything else, it is returned wrapped in a Just.
 */
function fromNullable(v) {
    if (typeof v === 'undefined' || v === null) {
        return (0, Nothing_js_1.nothing)();
    }
    return (0, Just_js_1.just)(v);
}
exports.fromNullable = fromNullable;
;
/**
 * Converts a value that _may_ be empty, such as a string or an array, to a
 * maybe. It will accept anything that responds to length.
 * If the value is has a length of 0, then Nothing is returned.
 * If the value is anything else, it is returned wrapped in a Just.
 */
function fromEmpty(xs) {
    return xs.length === 0 ? (0, Nothing_js_1.nothing)() : (0, Just_js_1.just)(xs);
}
exports.fromEmpty = fromEmpty;
/**
 * Returns true if maybe is an instance of Just
 *
 * Example: Remove `Nothing` values from an array
 *
 *     const maybes: Maybe<string>[]
 *     maybes.filter(isJust)
 */
function isJust(maybe) { return maybe.isJust(); }
exports.isJust = isJust;
/**
 * Returns true if maybe is an instance of Nothing
 *
 * Example: Count the `Nothing`s
 *
 *     const maybes: Maybe<string>[];
 *     maybes.filter(isNothing).length;
 */
function isNothing(maybe) { return maybe.isNothing(); }
exports.isNothing = isNothing;
function map(fn, maybe) {
    const doit = (maybe) => maybe.map(fn);
    return typeof maybe === 'undefined' ? doit : doit(maybe);
}
exports.map = map;
function andThen(fn, maybe) {
    const doit = (maybe) => maybe.andThen(fn);
    return typeof maybe === 'undefined' ? doit : doit(maybe);
}
exports.andThen = andThen;
function getOrElseValue(value, maybe) {
    const doit = (maybe) => maybe.getOrElseValue(value);
    return typeof maybe === 'undefined' ? doit : doit(maybe);
}
exports.getOrElseValue = getOrElseValue;
function getOrElse(fn, maybe) {
    const doit = (maybe) => maybe.getOrElse(fn);
    return typeof maybe === 'undefined' ? doit : doit(maybe);
}
exports.getOrElse = getOrElse;
__exportStar(require("./Just.js"), exports);
__exportStar(require("./Maybe.js"), exports);
__exportStar(require("./Nothing.js"), exports);

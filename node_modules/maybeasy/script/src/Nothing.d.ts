import Catamorphism from './Catamorphism.js';
import Maybe from './Maybe.js';
export declare class Nothing<A> extends Maybe<A> {
    getOrElse(fn: () => A): A;
    getOrElseValue(defaultValue: A): A;
    map<B>(_fn: (a: A) => B): Maybe<B>;
    andThen<B>(_fn: (a: A) => Maybe<B>): Maybe<B>;
    orElse(fn: () => Maybe<A>): Maybe<A>;
    cata<B>(matcher: Catamorphism<any, B>): B;
    assign<K extends string, B>(_k: K, _other: Maybe<B> | ((a: A) => Maybe<B>)): Maybe<A & {
        [k in K]: B;
    }>;
    do(_fn: (a: A) => void): Maybe<A>;
    elseDo(fn: () => void): Maybe<A>;
    isJust(): boolean;
    isNothing(): boolean;
}
export declare const nothing: <A>() => Maybe<A>;
export default Nothing;
